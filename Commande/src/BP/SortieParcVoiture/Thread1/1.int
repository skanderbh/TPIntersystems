ROUTINE BP.SortieParcVoiture.Thread1.1 [Type=INT,Generated]
 ;BP.SortieParcVoiture.Thread1.1
 ;Generated for class BP.SortieParcVoiture.Thread1.  Do NOT edit. 12/06/2020 01:09:02PM
 ;;376B6962;BP.SortieParcVoiture.Thread1
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag="",pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM BP_SortieParcVoiture.Thread1)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { if $g(%ext0111)'="" { s SQLCODE=-101 } else { s %ext0111=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEM4mOz1l5pyfeVJTiOo42bdcYP1","%New") if '$isobject(%ext0111) s %ext0111=$$%0dsqlA() } } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEM4mOz1l5pyfeVJTiOo42bdcYP1")||($ze["<ZSQLU>") { s %ext0111=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0111))'=1 { s SQLCODE=-102 } else { do %ext0111.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0111)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0111 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM BP_SortieParcVoiture . Thread1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),",0,ext,","BP.SortieParcVoiture.Thread1.CLS",1)
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^Ens.BP.ThreadD(id)),1)
	Set tClass=$classname(),tClass=$select(($extract(tClass,1,5)="User.")&&($length(tClass,".")=2):$piece(tClass,".",2),1:tClass)
	if tCLASSNAME'[($extract(tCLASSNAME)_tClass_$extract(tCLASSNAME)) Quit ""
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^Ens.BP.ThreadD(id))&&(''..%OnDetermineClass($select(id="":"",1:$listbuild(id_"")))):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Set $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^Ens.BP.ThreadD(id))
	Set bsv0N3=$listget(bsv0N2,1)
	Quit:$select(bsv0N3="":1,bsv0N3'[($extract(bsv0N3)_"BP.SortieParcVoiture.Thread1"_$extract(bsv0N3)):1,1:0) 1
	If bsv0N3'="~BP.SortieParcVoiture.Thread1~" {
		Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
		Set:bsv0N1'["." bsv0N1="User."_bsv0N1
		If bsv0N1'="" {
			Quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle)
		}
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("Ens.BP.Thread")),1)=1) {
		Set bsv0N4=$listget(bsv0N2,3)
		Set bsv0N5=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set ^Ens.BP.ThreadI("%Process",bsv0N5,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%KillExtentData(killstreams=0)
	Quit 1
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^Ens.BP.ThreadD(id)),1)
	Set id=$classname(),id=$select(($extract(id,1,5)="User.")&&($length(id,".")=2):$piece(id,".",2),1:id)
	If idclass'[($extract(idclass)_id_$extract(idclass)) {
		Quit $$Error^%apiOBJ(5825,$classname())
	}
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.BP.ThreadD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("BP.SortieParcVoiture.Thread1","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BP.ThreadD(%d(1))),"BP.SortieParcVoiture.Thread1",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BP.ThreadD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"BP_SortieParcVoiture"_"."_"Thread1") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"BP_SortieParcVoiture"_"."_"Thread1") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'BP_SortieParcVoiture.Thread1'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'BP_SortieParcVoiture.Thread1'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'BP_SortieParcVoiture.Thread1' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'BP_SortieParcVoiture.Thread1' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"%Process"))),'$listfind(pIgnoreIndexList,"%Process") {
			if pActions["P" {
				set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BP.ThreadI("%Process",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BP.ThreadI("%Process",sn(1),sn(2))=%d(13)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM BP_SortieParcVoiture.Thread1 WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEYAol38acFSPs9OcwJc3MHt3Eui","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEYAol38acFSPs9OcwJc3MHt3Eui")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM BP_SortieParcVoiture . Thread1 WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("%ActivityStack")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("%HandlerStack")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("%NextState")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("%PendingAlarmHandle")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("%PendingTimeout")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("%Process")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("%Status")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("%SubroutineStack")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("%SyncName")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("_SyncResponses")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("%SyncTimedOut")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("x__classname")=%d(13)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("%ActivityStack"))#2 %d(2)=%f("%ActivityStack") set:$d(%f("%HandlerStack"))#2 %d(3)=%f("%HandlerStack") set:$d(%f("%NextState"))#2 %d(4)=%f("%NextState") set:$d(%f("%PendingAlarmHandle"))#2 %d(5)=%f("%PendingAlarmHandle") set:$d(%f("%PendingTimeout"))#2 %d(6)=%f("%PendingTimeout") set:$d(%f("%Process"))#2 %d(7)=%f("%Process") set:$d(%f("%Status"))#2 %d(8)=%f("%Status") set:$d(%f("%SubroutineStack"))#2 %d(9)=%f("%SubroutineStack") set:$d(%f("%SyncName"))#2 %d(10)=%f("%SyncName") set:$d(%f("_SyncResponses"))#2 %d(11)=%f("_SyncResponses") set:$d(%f("%SyncTimedOut"))#2 %d(12)=%f("%SyncTimedOut") set:$d(%f("x__classname"))#2 %d(13)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table BP_SortieParcVoiture.Thread1
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.BP.ThreadD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("BP.SortieParcVoiture.Thread1","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"BP_SortieParcVoiture"_"."_"Thread1",%rowid) do ..%SQLEExit() QUIT  }
	if %e(13)'="" { set sn=$p(%e(13),$e(%e(13)),$l(%e(13),$e(%e(13)))-1) if "BP.SortieParcVoiture.Thread1"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","BP.SortieParcVoiture.Thread1",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","BP.SortieParcVoiture.Thread1",%k,"f",%t)) quit:%t=""  set %st=(%t="BP.SortieParcVoiture.Thread1") set %fk="" for  set %fk=$o(^rINDEXEXT("F","BP.SortieParcVoiture.Thread1",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("BP_SortieParcVoiture","Thread1","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens_BP","Thread","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3) {
		set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BP.ThreadI("%Process",sn(1),sn(2))
	}
	k ^Ens.BP.ThreadD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"BP_SortieParcVoiture"_"."_"Thread1") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"BP_SortieParcVoiture"_"."_"Thread1"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname,%Process INTO :%e() FROM %IGNOREINDEX * BP_SortieParcVoiture.Thread1 WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEuJsigBJNwqAleruRMUeFq7m5QC","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEuJsigBJNwqAleruRMUeFq7m5QC")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname , %Process INTO :%e() FROM %IGNOREINDEX * BP_SortieParcVoiture . Thread1 WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %ActivityStack,%HandlerStack,%NextState,%PendingAlarmHandle,%PendingTimeout,%Process,%Status,%SubroutineStack,%SyncName,_SyncResponses,%SyncTimedOut,x__classname INTO :%e() FROM %IGNOREINDEX * BP_SortieParcVoiture.Thread1 WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEX3aa4l4Z3WM6hDuXQ2p6BFv4XT","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEX3aa4l4Z3WM6hDuXQ2p6BFv4XT")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %ActivityStack , %HandlerStack , %NextState , %PendingAlarmHandle , %PendingTimeout , %Process , %Status , %SubroutineStack , %SyncName , _SyncResponses , %SyncTimedOut , x__classname INTO :%e() FROM %IGNOREINDEX * BP_SortieParcVoiture . Thread1 WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("%Process")) %d(7)=tF("%Process") set:$d(tF("x__classname")) %d(13)=tF("x__classname") 
			RETURN
		}
	}
	catch { }
	// Get index old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %Process,x__classname INTO :%d() FROM %IGNOREINDEX * BP_SortieParcVoiture.Thread1 WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %d, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEqFMQXdT7JghVbPvClNUrPmZQAo","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEqFMQXdT7JghVbPvClNUrPmZQAo")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if pF { set:$d(%d(7)) pF("%Process")=%d(7) set:$d(%d(13)) pF("x__classname")=%d(13)  }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %Process , x__classname INTO :%d() FROM %IGNOREINDEX * BP_SortieParcVoiture . Thread1 WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table BP_SortieParcVoiture.Thread1
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","BP_SortieParcVoiture"_"."_"Thread1") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(4)) %d(4)="S1" set:'$d(%d(8)) %d(8)=1 set:'$d(%d(12)) %d(12)=0 set:'$d(%d(13)) %d(13)="~BP.SortieParcVoiture.Thread1~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.BP.ThreadD) } elseif %d(1)>$g(^Ens.BP.ThreadD) { if $i(^Ens.BP.ThreadD,$zabs(%d(1)-$g(^Ens.BP.ThreadD))) {}} elseif $d(^Ens.BP.ThreadD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"BP_SortieParcVoiture"_"."_"Thread1"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(13))#2) %d(13)="" set:'($d(%d(7))#2) %d(7)=""
	if '$a(%check,2) {
		new %ls lock +^Ens.BP.ThreadD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("BP.SortieParcVoiture.Thread1","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.BP.ThreadD(%d(1))=$lb(%d(13),%d(4),%d(7),%d(8),%d(12),%d(6),,%d(9),,,%d(3),%d(2),%d(5),%d(10))
	set:($g(%d(11))'="") ^Ens.BP.ThreadD(%d(1),"%SyncResponses")=$g(%d(11))
	if '$a(%check,3) {
		set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BP.ThreadI("%Process",sn(1),sn(2))=%d(13)
	}
	lock:$a(%l) -^Ens.BP.ThreadD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"BP_SortieParcVoiture"_"."_"Thread1") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"BP_SortieParcVoiture"_"."_"Thread1"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"BP_SortieParcVoiture"_"."_"Thread1") quit
%SQLNormalizeFields()
	new %f for %f=7,8,12 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"BP_SortieParcVoiture"_"."_"Thread1",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),%ActivityStack,%HandlerStack,%NextState,%PendingAlarmHandle,%PendingTimeout,%INTERNAL(%Process),%Status,%SubroutineStack,%SyncName,%INTERNAL(_SyncResponses),%SyncTimedOut,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10),:d(11),:d(12),:d(13) FROM BP_SortieParcVoiture.Thread1 WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEDyG2y3LOchEuroHgY1tW2xTggQ","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEDyG2y3LOchEuroHgY1tW2xTggQ")||($ze["<ZSQLU>") { d %0dsqlL } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(13)'="" { new sn set sn=$p(d(13),$e(d(13)),$l(d(13),$e(d(13)))-1) if "BP.SortieParcVoiture.Thread1"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("BP.SortieParcVoiture.Thread1",18),d=$zobjexport(13,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlL	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , %ActivityStack , %HandlerStack , %NextState , %PendingAlarmHandle , %PendingTimeout , %INTERNAL ( %Process ) , %Status , %SubroutineStack , %SyncName , %INTERNAL ( _SyncResponses ) , %SyncTimedOut , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) , :d(10) , :d(11) , :d(12) , :d(13) FROM BP_SortieParcVoiture . Thread1 WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.BP.ThreadD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BP.ThreadD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.BP.ThreadD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"BP_SortieParcVoiture"_"."_"Thread1",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"BP_SortieParcVoiture"_"."_"Thread1",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table BP_SortieParcVoiture.Thread1
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:13 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","BP_SortieParcVoiture"_"."_"Thread1") QUIT  }
	for icol=2:1:13 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.BP.ThreadD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("BP.SortieParcVoiture.Thread1","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"BP_SortieParcVoiture"_"."_"Thread1",%rowid) do ..%SQLEExit() QUIT  } for icol=13,7 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"BP_SortieParcVoiture"_"."_"Thread1",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(13)'="" set sn=$p(%e(13),$e(%e(13)),$l(%e(13),$e(%e(13)))-1) if "BP.SortieParcVoiture.Thread1"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,$a(%e,8):1,$a(%e,9):1,$a(%e,10):1,$a(%e,12):1,1:$a(%e,13)) {
		set ^Ens.BP.ThreadD(%d(1))=$listupdate($g(^Ens.BP.ThreadD(%d(1))),1,$a(%e,13):%d(13),$a(%e,4):%d(4),$a(%e,7):%d(7),$a(%e,8):%d(8),$a(%e,12):%d(12),$a(%e,6):%d(6),,$a(%e,9):%d(9),,,$a(%e,3):%d(3),$a(%e,2):%d(2),$a(%e,5):%d(5),$a(%e,10):%d(10))
	}
	set:$a(%e,11) ^Ens.BP.ThreadD(%d(1),"%SyncResponses")=$g(%d(11))
	if '$a(%check,3) { 
		if $a(%e,7)||$a(%e,13) {	// %Process index map
			if $a(%e,7) { set sn(1)=%e(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BP.ThreadI("%Process",sn(1),sn(2)) }
			set sn(1)=%d(7) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BP.ThreadI("%Process",sn(1),sn(2))=%d(13)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"BP_SortieParcVoiture"_"."_"Thread1",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"BP_SortieParcVoiture"_"."_"Thread1") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	if $g(%d(12))'="",'($select(%d(12)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(12),0):1,1:$$Error^%apiOBJ(7207,%d(12)))) { set sqlcode=..%SQLInvalid(12+1,%d(12)) } 
	if $g(%d(8))'="",'(%d(8)'[","&&(",1,2,3,4,"[(","_%d(8)_","))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	new %f for %f=2,3,4,5,6,9,10 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","%ActivityStack","%HandlerStack","%NextState","%PendingAlarmHandle","%PendingTimeout","%Process","%Status","%SubroutineStack","%SyncName","_SyncResponses","%SyncTimedOut","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.BP.ThreadD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$s(i%%Process'="":i%%Process,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.BP.ThreadD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.BP.ThreadD(id))) {
					set insert=1
					if lock { lock -(^Ens.BP.ThreadD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if i%%Concurrency&&$tlevel {  lock +(^Ens.BP.ThreadD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.BP.ThreadD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set zzc46v1="" For  { Set zzc46v1 = $Order(i%%ChildThreads(zzc46v1),1,val) Quit:zzc46v1=""  Set ^Ens.BP.ThreadD(id,"%ChildThreads",zzc46v1)=val }
				set zzc46v2="" For  { Set zzc46v2 = $Order(i%%PendingResponses(zzc46v2),1,val) Quit:zzc46v2=""  Set ^Ens.BP.ThreadD(id,"%PendingResponses",zzc46v2)=val }
				set ^Ens.BP.ThreadD(id,"%SyncResponses")=i%%SyncResponses
				set ^Ens.BP.ThreadD(id)=$lb("~BP.SortieParcVoiture.Thread1~",i%%NextState,i%%Process,i%%Status,i%%SyncTimedOut,i%%PendingTimeout,,i%%SubroutineStack,,,i%%HandlerStack,i%%ActivityStack,i%%PendingAlarmHandle,i%%SyncName)
				set ^Ens.BP.ThreadI("%Process",zzc10v1,id)="~BP.SortieParcVoiture.Thread1~"
			}
			else {
				set zzc31v1=$listget($G(^Ens.BP.ThreadD(id)),3)
				if (i%%Process'=zzc31v1) {
					kill ^Ens.BP.ThreadI("%Process",$s(zzc31v1'="":zzc31v1,1:-1E14),id)
					set ^Ens.BP.ThreadI("%Process",zzc10v1,id)="~BP.SortieParcVoiture.Thread1~"
				}
				kill nodes merge nodes=i%%ChildThreads
				set zzc47v1="" for { set zzc47v1 = $Order(^Ens.BP.ThreadD(id,"%ChildThreads",zzc47v1),1,data) Quit:zzc47v1=""  if $data(nodes(zzc47v1),val) { if data=val kill nodes(zzc47v1) } else { kill ^Ens.BP.ThreadD(id,"%ChildThreads",zzc47v1) } }
				merge ^Ens.BP.ThreadD(id,"%ChildThreads")=nodes
				kill nodes merge nodes=i%%PendingResponses
				set zzc47v2="" for { set zzc47v2 = $Order(^Ens.BP.ThreadD(id,"%PendingResponses",zzc47v2),1,data) Quit:zzc47v2=""  if $data(nodes(zzc47v2),val) { if data=val kill nodes(zzc47v2) } else { kill ^Ens.BP.ThreadD(id,"%PendingResponses",zzc47v2) } }
				merge ^Ens.BP.ThreadD(id,"%PendingResponses")=nodes
				set ^Ens.BP.ThreadD(id,"%SyncResponses")=i%%SyncResponses
				set ^Ens.BP.ThreadD(id)=$lb("~BP.SortieParcVoiture.Thread1~",i%%NextState,i%%Process,i%%Status,i%%SyncTimedOut,i%%PendingTimeout,,i%%SubroutineStack,,,i%%HandlerStack,i%%ActivityStack,i%%PendingAlarmHandle,i%%SyncName)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.BP.ThreadD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.BP.ThreadD(id)) }
		}
		if lock lock -(^Ens.BP.ThreadD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'BP.SortieParcVoiture.Thread1'"
	QUIT 1
zS1(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Set callrequest=##class(msg.Reservation.verifierReservationDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=1,callrequest.plaque=request.plaque
 If ('status) Quit
 Set status=..MakeAsyncCall("OnResponse1","Reservation",callrequest,"verifReservation",1,0,"verifReservation",1)
 If ('status) Quit
 Kill callrequest
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("verifReservation") Do ..%PendingResponses.SetAt("","verifReservation")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit }
zS10(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit }
zS11(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Set ..%NextState="S8"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit }
zS2(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit }
zS3(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 If (response.codeRetour = "OK") {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit }
zS4(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit }
zS5(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Set callrequest=##class(msg.Reservation.supprimerVoitureDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=1,callrequest.plaque=request.plaque
 If ('status) Quit
 Set status=..MakeAsyncCall("OnResponse2","Reservation",callrequest,"supprimerVoitureReservation",1,0,"supprimerVoitureReservation",1)
 If ('status) Quit
 Kill callrequest
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("supprimerVoitureReservation") Do ..%PendingResponses.SetAt("","supprimerVoitureReservation")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit }
zS6(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit }
zS7(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 If (response.codeRetour = "OK") {
 Set ..%NextState="S9"
 } else {
 Set ..%NextState="S8"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit }
zS8(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit }
zS9(process,context,synctimedout,syncresponses,request,response) [ process,context ] public {
 Set $ZT="Trap",status=1 do {
 Set callrequest=##class(msg.supprimerVoitureDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=1,callrequest.plaque=request.plaque
 If ('status) Quit
 Set status=..MakeAsyncCall("OnResponse3","Voiture",callrequest,"supprimerVoiture",1,0,"supprimerVoiture",1)
 If ('status) Quit
 Kill callrequest
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("supprimerVoiture") Do ..%PendingResponses.SetAt("","supprimerVoiture")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S11"
 } else {
    Set ..%NextState="S10",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit }
%ChildThreadsGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ArrayOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%ChildThreads=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="BP.SortieParcVoiture.Thread1:%ChildThreads",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%ChildThreads%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%PendingResponsesGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ArrayOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%PendingResponses=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="BP.SortieParcVoiture.Thread1:%PendingResponses",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%PendingResponses%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM BP_SortieParcVoiture.Thread1)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { if $g(%qHandle)'="" { s SQLCODE=-101 } else { s %qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvrleMVxh7MhkiVoBG5wf8wWga2","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlN() } } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvrleMVxh7MhkiVoBG5wf8wWga2")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlN() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlN()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM BP_SortieParcVoiture . Thread1"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","BP.SortieParcVoiture",0,"",),",1,QExtent,","BP.SortieParcVoiture.Thread1.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM BP_SortieParcVoiture . Thread1")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Thread1","BP_SortieParcVoiture","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
%ProcessExists(K1,id="") [ K1,SQLCODE,id ] public { New SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM BP_SortieParcVoiture.Thread1 WHERE (:K1 is not null and %Process = :K1) OR (:K1 IS NULL AND %Process IS NULL))
 	 ;--- ** SQL PUBLIC Variables: K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE79UOjbgfSW3wCcl4MHSSre5p9N","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE79UOjbgfSW3wCcl4MHSSre5p9N")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM BP_SortieParcVoiture . Thread1 WHERE ( :K1 IS NOT NULL AND %Process = :K1 ) OR ( :K1 IS NULL AND %Process IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens_BP.Thread WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xES1nKiqL88vbrqHtrJnmortabv6","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xES1nKiqL88vbrqHtrJnmortabv6")||($ze["<ZSQLU>") { d %0dsqlT } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM BP_SortieParcVoiture.Thread1 WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEYAol38acFSPs9OcwJc3MHt3Eui","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEYAol38acFSPs9OcwJc3MHt3Eui")||($ze["<ZSQLU>") { d %0dsqlV } else { throw } } QUIT SQLCODE=100
 q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens_BP . Thread WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
%0dsqlV	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM BP_SortieParcVoiture . Thread1 WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("I","%systemInclude")="",%xxsql("I","EnsCompiler")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="COMMANDE"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","BP.SortieParcVoiture",0,"",),,"BP.SortieParcVoiture.Thread1.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"BP_SortieParcVoiture"_"."_"Thread1"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return