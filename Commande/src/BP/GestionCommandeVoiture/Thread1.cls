/// This class is generated by the BP.GestionCommandeVoiture BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class BP.GestionCommandeVoiture.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = BP.GestionCommandeVoiture, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call VerifCatalogue ---
 #; --- Begin Request ---
 Set callrequest=##class(msg.consulterVoitureCatalogueDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.marque=request.marque
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.modele=request.modele
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","Catalogue",callrequest,"VerifCatalogue",1,0,"VerifCatalogue",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call VerifCatalogue ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("VerifCatalogue") Do ..%PendingResponses.SetAt("","VerifCatalogue")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S10(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
}

Method S11(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call File ---
 #; --- Begin Request ---
 Set callrequest=##class(msg.pushVoitureFileDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.plaque")
 Set status=$$$OK,callrequest.voiture.plaque=context.plaque
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.marque")
 Set status=$$$OK,callrequest.voiture.marque=context.wsVoiture.marque
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.nbPlaces")
 Set status=$$$OK,callrequest.voiture.nbPlaces=context.wsVoiture.nbPlaces
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.modele")
 Set status=$$$OK,callrequest.voiture.modele=context.wsVoiture.modele
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.couleur")
 Set status=$$$OK,callrequest.voiture.couleur=context.wsVoiture.couleur
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.categorie")
 Set status=$$$OK,callrequest.voiture.categorie=context.wsVoiture.categorie
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","File",callrequest,"File",1,0,"File",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call File ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("File") Do ..%PendingResponses.SetAt("","File")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S13"
 } else {
    Set ..%NextState="S12",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
}

Method S12(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S13"
 } else {
    Set ..%NextState="S12",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
}

Method S13(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S10"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (response.codeRetour = "OK") {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Plaque ---
 #; --- Begin Request ---
 Set callrequest=##class(msg.generationPlaqueDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=..MakeAsyncCall("OnResponse2","Plaque",callrequest,"Plaque",1,0,"Plaque",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Plaque ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Plaque") Do ..%PendingResponses.SetAt("","Plaque")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.wsVoiture
 Set status=$classmethod("Transform.wsCommandeToWsVoiture","Transform",context.wsCatalogue,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.wsVoiture=iscTemp
 #; --- Begin Call CreerVoiture ---
 #; --- Begin Request ---
 Set callrequest=##class(msg.creerVoitureDmde).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.plaque")
 Set status=$$$OK,callrequest.voiture.plaque=context.plaque
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.marque")
 Set status=$$$OK,callrequest.voiture.marque=context.wsVoiture.marque
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.modele")
 Set status=$$$OK,callrequest.voiture.modele=context.wsVoiture.modele
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.categorie")
 Set status=$$$OK,callrequest.voiture.categorie=context.wsVoiture.categorie
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.nbPlaces")
 Set status=$$$OK,callrequest.voiture.nbPlaces=context.wsVoiture.nbPlaces
 If $$$ISERR(status) Quit
 Do ##class(Ens.DataTransform).instantiateProps(callrequest,"callrequest.voiture.couleur")
 Set status=$$$OK,callrequest.voiture.couleur=request.couleur
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","Voiture",callrequest,"CreerVoiture",1,0,"CreerVoiture",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call CreerVoiture ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("CreerVoiture") Do ..%PendingResponses.SetAt("","CreerVoiture")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S9"
 } else {
    Set ..%NextState="S8",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Method S9(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (response.codeRetour = "OK") {
 Set ..%NextState="S11"
 } else {
 Set ..%NextState="S10"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
